{"version":3,"sources":["CounterFirst/redux/getCounterFirstModule.ts","CounterFirst/redux/counterFirst.ts","CounterSecond/redux/getCounterSecondModule.ts","CounterSecond/redux/counterSecond.ts","utils/theme.ts","modules/routerModule.ts","store/index.ts","CounterFirst/components/CounterFirstLoader.tsx","CounterSecond/components/CounterSecondLoader.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getCounterFirstModule","id","reducerMap","counterFirst","reducer","ACTION","initialState","value","state","action","type","COUNTER_INCREASE","COUNTER_DECREASE","counterSelector","createSelector","increase","decrease","getCounterSecondModule","counterSecond","theme","red","green","blue","history","createBrowserHistory","routerModule","router","connectRouter","middlewares","routerMiddleware","store","createStore","extensions","getThunkExtension","advancedComposeEnhancers","composeWithDevTools","name","CounterFirst","React","CounterFirstLoader","modules","fallback","CounterSecond","CounterSecondLoader","App","to","activeStyle","color","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","context","ReactReduxContext","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.658e6ac3.chunk.js","sourcesContent":["import { IModule } from 'redux-dynamic-modules';\nimport { reducer } from './counterFirst';\nimport { CounterFirstModule } from './types';\n\nexport function getCounterFirstModule(): IModule<CounterFirstModule> {\n  return {\n    id: 'counterFirst',\n    reducerMap: {\n      counterFirst: reducer,\n    },\n  };\n}\n","import { Reducer } from 'redux';\nimport { createSelector } from 'reselect';\nimport { RootState } from 'store';\n\n/**\n * Constants\n */\nexport enum ACTION {\n  COUNTER_INCREASE = '@@counterFirst/COUNTER_INCREASE',\n  COUNTER_DECREASE = '@@counterFirst/COUNTER_DECREASE',\n}\n\nexport interface CounterState {\n  readonly value: number;\n}\n\nconst initialState: CounterState = {\n  value: 0,\n};\n\nexport const reducer: Reducer<CounterState, ActionType> = (\n  state = initialState,\n  action,\n) => {\n  switch (action.type) {\n    case ACTION.COUNTER_INCREASE:\n      return {\n        ...state,\n        value: state.value + 1,\n      };\n    case ACTION.COUNTER_DECREASE:\n      return {\n        ...state,\n        value: state.value - 1,\n      };\n    default:\n      return state;\n  }\n};\n\n/**\n * Selectors\n */\nexport const stateSelector = (state: RootState) => state.counterFirst;\n\nexport const counterSelector = createSelector(\n  stateSelector,\n  (state) => state.value,\n);\n\n/**\n * Action Creators\n */\ninterface Increase {\n  type: typeof ACTION.COUNTER_INCREASE;\n}\n\ninterface Decrease {\n  type: typeof ACTION.COUNTER_DECREASE;\n}\n\ntype ActionType = Increase | Decrease;\n\nexport const increase = () => ({\n  type: ACTION.COUNTER_INCREASE,\n});\n\nexport const decrease = () => ({\n  type: ACTION.COUNTER_DECREASE,\n});\n","import { IModule } from 'redux-dynamic-modules';\nimport { reducer } from './counterSecond';\nimport { CounterSecondModule } from './types';\n\nexport function getCounterSecondModule(): IModule<CounterSecondModule> {\n  return {\n    id: 'counterSecond',\n    reducerMap: {\n      counterSecond: reducer,\n    },\n  };\n}\n","import { Reducer } from 'redux';\nimport { createSelector } from 'reselect';\nimport { RootState } from 'store';\n\n/**\n * Constants\n */\nexport enum ACTION {\n  COUNTER_INCREASE = '@@counterSecond/COUNTER_INCREASE',\n  COUNTER_DECREASE = '@@counterSecond/COUNTER_DECREASE',\n}\n\nexport interface CounterState {\n  readonly value: number;\n}\n\nconst initialState: CounterState = {\n  value: 0,\n};\n\nexport const reducer: Reducer<CounterState, ActionType> = (\n  state = initialState,\n  action,\n) => {\n  switch (action.type) {\n    case ACTION.COUNTER_INCREASE:\n      return {\n        ...state,\n        value: state.value + 1,\n      };\n    case ACTION.COUNTER_DECREASE:\n      return {\n        ...state,\n        value: state.value - 1,\n      };\n    default:\n      return state;\n  }\n};\n\n/**\n * Selectors\n */\nexport const stateSelector = (state: RootState) => state.counterSecond;\n\nexport const counterSelector = createSelector(\n  stateSelector,\n  (state) => state.value,\n);\n\n/**\n * Action Creators\n */\ninterface Increase {\n  type: typeof ACTION.COUNTER_INCREASE;\n}\n\ninterface Decrease {\n  type: typeof ACTION.COUNTER_DECREASE;\n}\n\ntype ActionType = Increase | Decrease;\n\nexport const increase = () => ({\n  type: ACTION.COUNTER_INCREASE,\n});\n\nexport const decrease = () => ({\n  type: ACTION.COUNTER_DECREASE,\n});\n","const theme = {\n  red: '#f00',\n  green: '#0f0',\n  blue: '#00f',\n};\n\nexport default theme;\n","import { createBrowserHistory, LocationState } from 'history';\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport { IModule } from 'redux-dynamic-modules';\n\nexport const history = createBrowserHistory();\n\nexport const routerModule: IModule<LocationState> = {\n  id: 'startup',\n  reducerMap: {\n    router: connectRouter(history),\n  },\n  middlewares: [routerMiddleware(history)],\n};\n","import { composeWithDevTools } from 'redux-devtools-extension';\nimport { getThunkExtension } from 'redux-dynamic-modules-thunk';\nimport { createStore } from 'redux-dynamic-modules';\nimport { routerModule } from 'modules/routerModule';\nimport { CounterFirstModule } from 'CounterFirst/redux/types';\nimport { CounterSecondModule } from 'CounterSecond/redux/types';\n\n// rehydrate state on app start\nconst initialState = {};\n\nconst rootModule = {\n  id: 'root-module',\n  reducerMap: {},\n};\n\nconst store = createStore(\n  {\n    initialState,\n    extensions: [getThunkExtension()],\n    advancedComposeEnhancers: composeWithDevTools({\n      name: 'dynamic-modules-app',\n    }),\n  },\n  rootModule,\n  routerModule,\n);\n\nexport type DynamicModules = CounterFirstModule & CounterSecondModule;\n\n// export type StaticModules = {};\n// export type RootState = DynamicModules & StaticModules;\n\nexport type RootState = DynamicModules;\n\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n\n// https://github.com/microsoft/redux-dynamic-modules/issues/118\n","import * as React from 'react';\nimport { DynamicModuleLoader } from 'redux-dynamic-modules';\nimport { getCounterFirstModule } from '../redux/getCounterFirstModule';\n\nconst CounterFirst = React.lazy(() => import('./CounterFirst'));\n\nconst CounterFirstLoader: React.FC = () => {\n  return (\n    <DynamicModuleLoader modules={[getCounterFirstModule()]}>\n      <React.Suspense fallback={<div>loading...</div>}>\n        <CounterFirst />\n      </React.Suspense>\n    </DynamicModuleLoader>\n  );\n};\n\nexport default CounterFirstLoader;\n","import * as React from 'react';\nimport { DynamicModuleLoader } from 'redux-dynamic-modules';\nimport { getCounterSecondModule } from '../redux/getCounterSecondModule';\n\nconst CounterSecond = React.lazy(() => import('./CounterSecond'));\n\nconst CounterSecondLoader: React.FC = () => {\n  return (\n    <DynamicModuleLoader modules={[getCounterSecondModule()]}>\n      <React.Suspense fallback={<div>loading...</div>}>\n        <CounterSecond />\n      </React.Suspense>\n    </DynamicModuleLoader>\n  );\n};\n\nexport default CounterSecondLoader;\n","import * as React from 'react';\nimport { Route, NavLink, Switch } from 'react-router-dom';\nimport CounterFirstLoader from 'CounterFirst/components/CounterFirstLoader';\nimport CounterSecondLoader from 'CounterSecond/components/CounterSecondLoader';\n\nconst App: React.FC = () => {\n  return (\n    <div>\n      Navigation:\n      <div>\n        <NavLink to=\"/first-module\" activeStyle={{ color: 'red' }}>\n          First Module\n        </NavLink>\n        <NavLink to=\"/second-module\" activeStyle={{ color: 'red' }}>\n          Second Module\n        </NavLink>\n      </div>\n      <div>\n        <Switch>\n          <Route path=\"/first-module\" component={CounterFirstLoader} />\n          <Route path=\"/second-module\" component={CounterSecondLoader} />\n        </Switch>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider, ReactReduxContext } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\nimport theme from 'utils/theme';\nimport { ThemeProvider } from 'styled-components';\nimport { history } from './modules/routerModule';\nimport store from './store';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} context={ReactReduxContext}>\n      <ConnectedRouter history={history} context={ReactReduxContext}>\n        <ThemeProvider theme={theme}>\n          <App />\n        </ThemeProvider>\n      </ConnectedRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}