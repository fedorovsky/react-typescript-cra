{"version":3,"sources":["store/counterFirst/counterFirst.ts","utils/theme.ts","store/counterSecond/counterSecond.ts","store/rootReducer.ts","store/index.ts","components/CounterFirst/index.ts","components/CounterFirst/CounterFirst.tsx","components/CounterSecond/index.ts","components/CounterSecond/CounterSecond.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ACTION","theme","red","green","blue","initialState","value","reducer","state","action","type","COUNTER_INCREASE","COUNTER_DECREASE","counterSelector","createSelector","counterFirst","counterSecond","rootReducer","history","combineReducers","router","connectRouter","counterFistReducer","counterSecondReducer","createBrowserHistory","enhancer","composeWithDevTools","applyMiddleware","routerMiddleware","thunk","store","createStore","CounterFirst","counterValue","useSelector","dispatch","useDispatch","onClick","CounterSecond","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","context","ReactReduxContext","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sJAOYA,E,wDCDGC,EAND,CACZC,IAAK,OACLC,MAAO,OACPC,KAAM,Q,gEDIIJ,K,mDAAAA,E,oDAAAA,M,KASZ,IETYA,EFSNK,EAA6B,CACjCC,MAAO,GAGHC,EAA6C,WAG7C,IAFJC,EAEG,uDAFKH,EACRI,EACG,uCACH,OAAQA,EAAOC,MACb,KAAKV,EAAOW,iBACV,OAAO,2BACFH,GADL,IAEEF,MAAOE,EAAMF,MAAQ,IAEzB,KAAKN,EAAOY,iBACV,OAAO,2BACFJ,GADL,IAEEF,MAAOE,EAAMF,MAAQ,IAEzB,QACE,OAAOE,IAUAK,EAAkBC,aAFF,SAACN,GAAD,OAAsBA,EAAMO,gBAIvD,SAACP,GAAD,OAAWA,EAAMF,U,SEzCPN,K,oDAAAA,E,qDAAAA,M,KASZ,IAAMK,EAA6B,CACjCC,MAAO,GAGHC,EAA6C,WAG7C,IAFJC,EAEG,uDAFKH,EACRI,EACG,uCACH,OAAQA,EAAOC,MACb,KAAKV,EAAOW,iBACV,OAAO,2BACFH,GADL,IAEEF,MAAOE,EAAMF,MAAQ,IAEzB,KAAKN,EAAOY,iBACV,OAAO,2BACFJ,GADL,IAEEF,MAAOE,EAAMF,MAAQ,IAEzB,QACE,OAAOE,IAUAK,EAAkBC,aAFF,SAACN,GAAD,OAAsBA,EAAMQ,iBAIvD,SAACR,GAAD,OAAWA,EAAMF,SCnCJW,EAPK,SAACC,GAAD,OAClBC,0BAAgB,CACdC,OAAQC,YAAcH,GACtBH,aAAcO,EACdN,cAAeO,KCFNL,EAAUM,cAGjBC,EAAWC,8BACfC,0BAAgBC,YAAiBV,GAAUW,MAa9BC,EANDC,sBAAYd,EAAYC,GAHjB,GAGyCO,GCjB/CO,ECMM,WACnB,IAAMC,EAAeC,YAAYrB,GAE3BsB,EAAWC,cAMjB,OACE,2BACE,4CAAoBH,GACpB,0BAAQvB,KAAK,SAAS2B,QAPH,kBAAMF,ENmDA,CAC7BzB,KAAMV,EAAOW,qBM7CT,YAGA,0BAAQD,KAAK,SAAS2B,QARH,kBAAMF,ENqDA,CAC7BzB,KAAMV,EAAOY,qBM9CT,cCrBS0B,ECMO,WACpB,IAAML,EAAeC,YAAYrB,GAE3BsB,EAAWC,cAMjB,OACE,2BACE,6CAAqBH,GACrB,0BAAQvB,KAAK,SAAS2B,QAPH,kBAAMF,ENmDA,CAC7BzB,KAAMV,EAAOW,qBM7CT,YAGA,0BAAQD,KAAK,SAAS2B,QARH,kBAAMF,ENqDA,CAC7BzB,KAAMV,EAAOY,qBM9CT,cCZS2B,EAPO,kBACpB,2BACE,gBAAC,EAAD,MACA,gBAAC,EAAD,QCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUjB,MAAOA,EAAOkB,QAASC,KAC/B,kBAAC,IAAD,CAAiB/B,QAASA,EAAS8B,QAASC,KAC1C,kBAAC,IAAD,CAAehD,MAAOA,GACpB,kBAAC,EAAD,UAKRiD,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.32f2439d.chunk.js","sourcesContent":["import { Reducer } from 'redux';\nimport { createSelector } from 'reselect';\nimport { RootState } from 'store';\n\n/**\n * Constants\n */\nexport enum ACTION {\n  COUNTER_INCREASE = '@@counterFirst/COUNTER_INCREASE',\n  COUNTER_DECREASE = '@@counterFirst/COUNTER_DECREASE',\n}\n\nexport interface CounterState {\n  readonly value: number;\n}\n\nconst initialState: CounterState = {\n  value: 0,\n};\n\nconst reducer: Reducer<CounterState, ActionType> = (\n  state = initialState,\n  action,\n) => {\n  switch (action.type) {\n    case ACTION.COUNTER_INCREASE:\n      return {\n        ...state,\n        value: state.value + 1,\n      };\n    case ACTION.COUNTER_DECREASE:\n      return {\n        ...state,\n        value: state.value - 1,\n      };\n    default:\n      return state;\n  }\n};\nexport { reducer as counterFistReducer };\n\n/**\n * Selectors\n */\nexport const stateSelector = (state: RootState) => state.counterFirst;\n\nexport const counterSelector = createSelector(\n  stateSelector,\n  (state) => state.value,\n);\n\n/**\n * Action Creators\n */\ninterface Increase {\n  type: typeof ACTION.COUNTER_INCREASE;\n}\n\ninterface Decrease {\n  type: typeof ACTION.COUNTER_DECREASE;\n}\n\ntype ActionType = Increase | Decrease;\n\nexport const increase = () => ({\n  type: ACTION.COUNTER_INCREASE,\n});\n\nexport const decrease = () => ({\n  type: ACTION.COUNTER_DECREASE,\n});\n","const theme = {\n  red: '#f00',\n  green: '#0f0',\n  blue: '#00f',\n};\n\nexport default theme;\n","import { Reducer } from 'redux';\nimport { createSelector } from 'reselect';\nimport { RootState } from 'store';\n\n/**\n * Constants\n */\nexport enum ACTION {\n  COUNTER_INCREASE = '@@counterSecond/COUNTER_INCREASE',\n  COUNTER_DECREASE = '@@counterSecond/COUNTER_DECREASE',\n}\n\nexport interface CounterState {\n  readonly value: number;\n}\n\nconst initialState: CounterState = {\n  value: 0,\n};\n\nconst reducer: Reducer<CounterState, ActionType> = (\n  state = initialState,\n  action,\n) => {\n  switch (action.type) {\n    case ACTION.COUNTER_INCREASE:\n      return {\n        ...state,\n        value: state.value + 1,\n      };\n    case ACTION.COUNTER_DECREASE:\n      return {\n        ...state,\n        value: state.value - 1,\n      };\n    default:\n      return state;\n  }\n};\nexport { reducer as counterSecondReducer };\n\n/**\n * Selectors\n */\nexport const stateSelector = (state: RootState) => state.counterSecond;\n\nexport const counterSelector = createSelector(\n  stateSelector,\n  (state) => state.value,\n);\n\n/**\n * Action Creators\n */\ninterface Increase {\n  type: typeof ACTION.COUNTER_INCREASE;\n}\n\ninterface Decrease {\n  type: typeof ACTION.COUNTER_DECREASE;\n}\n\ntype ActionType = Increase | Decrease;\n\nexport const increase = () => ({\n  type: ACTION.COUNTER_INCREASE,\n});\n\nexport const decrease = () => ({\n  type: ACTION.COUNTER_DECREASE,\n});\n","import { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\nimport { History } from 'history';\nimport { counterFistReducer } from './counterFirst/counterFirst';\nimport { counterSecondReducer } from './counterSecond/counterSecond';\n\nconst rootReducer = (history: History) =>\n  combineReducers({\n    router: connectRouter(history),\n    counterFirst: counterFistReducer,\n    counterSecond: counterSecondReducer,\n  });\n\nexport default rootReducer;\n\n// https://github.com/microsoft/redux-dynamic-modules/issues/118\n","import { createBrowserHistory } from 'history';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createStore, applyMiddleware } from 'redux';\nimport { routerMiddleware } from 'connected-react-router';\nimport thunk from 'redux-thunk';\nimport rootReducer from './rootReducer';\n\n// browser history\nexport const history = createBrowserHistory();\n\n// compose enhancers\nconst enhancer = composeWithDevTools(\n  applyMiddleware(routerMiddleware(history), thunk),\n);\n\n// rehydrate state on app start\nconst initialState = {};\n\n// create store\nconst store = createStore(rootReducer(history), initialState, enhancer);\n\nexport type RootState = ReturnType<typeof store.getState>;\n\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","import CounterFirst from './CounterFirst';\n\nexport default CounterFirst;\n","import * as React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  counterSelector,\n  decrease,\n  increase,\n} from 'store/counterFirst/counterFirst';\n\nconst CounterFirst = () => {\n  const counterValue = useSelector(counterSelector);\n\n  const dispatch = useDispatch();\n\n  const handleIncrease = () => dispatch(increase());\n\n  const handleDecrease = () => dispatch(decrease());\n\n  return (\n    <div>\n      <h1>Counter First: {counterValue}</h1>\n      <button type=\"button\" onClick={handleIncrease}>\n        increase\n      </button>\n      <button type=\"button\" onClick={handleDecrease}>\n        decrease\n      </button>\n    </div>\n  );\n};\n\nexport default CounterFirst;\n","import CounterSecond from './CounterSecond';\n\nexport default CounterSecond;\n","import * as React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  counterSelector,\n  decrease,\n  increase,\n} from 'store/counterSecond/counterSecond';\n\nconst CounterSecond = () => {\n  const counterValue = useSelector(counterSelector);\n\n  const dispatch = useDispatch();\n\n  const handleIncrease = () => dispatch(increase());\n\n  const handleDecrease = () => dispatch(decrease());\n\n  return (\n    <div>\n      <h1>Counter Second: {counterValue}</h1>\n      <button type=\"button\" onClick={handleIncrease}>\n        increase\n      </button>\n      <button type=\"button\" onClick={handleDecrease}>\n        decrease\n      </button>\n    </div>\n  );\n};\n\nexport default CounterSecond;\n","import * as React from 'react';\nimport CounterFirst from 'components/CounterFirst';\nimport CounterSecond from 'components/CounterSecond';\n\nconst App: React.FC = () => (\n  <div>\n    <CounterFirst />\n    <CounterSecond />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider, ReactReduxContext } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { ThemeProvider } from 'styled-components';\nimport theme from 'utils/theme';\nimport store, { history } from './store';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} context={ReactReduxContext}>\n      <ConnectedRouter history={history} context={ReactReduxContext}>\n        <ThemeProvider theme={theme}>\n          <App />\n        </ThemeProvider>\n      </ConnectedRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}